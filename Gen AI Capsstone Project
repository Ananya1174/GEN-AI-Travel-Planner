{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":97258,"sourceType":"competition"}],"dockerImageVersionId":31012,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/ananyarao11/gen-ai-capstone-project-ai-travel-planner?scriptVersionId=256193218\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","source":"# **AI Travel Planner: Personalized Itinerary Generator**","metadata":{}},{"cell_type":"markdown","source":"## **Objective**\nThis project aims to develop a smart AI Travel Planner that leverages Generative AI capabilities to provide personalized and interactive travel planning. It combines function calling for itinerary generation and updates, structured JSON outputs for clear responses, retrieval augmented generation (RAG) using ChromaDB for relevant context-aware suggestions, and vision input to process travel-related images. The goal is to showcase how multimodal AI can enhance user experience in planning trips efficiently and intuitively.","metadata":{}},{"cell_type":"markdown","source":"## **Features**\nUser Preference Collection: Gathers detailed travel preferences (destination, duration, activities, food, etc.) from users.\n\nPersonalized Itinerary Generation: Generates a tailored travel itinerary in JSON format based on user preferences.\n\nPacking List Generation: Creates a personalized packing list organized into categories like Clothing, Electronics, and Toiletries.\n\nRetrieval-Augmented Generation (RAG): Retrieves relevant documents (e.g., packing tips, safety tips) from a Chroma database to answer user                                        queries.\n\nGenAI Integration (Google Gemini): Uses Google’s Gemini models to generate content like itineraries and packing lists, as well as answer                                       travel-related questions.\n\nText and Image Integration: Analyzes images and generates descriptions or content related to the images.\n\nEfficient Data Storage and Retrieval (ChromaDB): Stores and retrieves large amounts of travel-related data efficiently with ChromaDB.\n\nInteractive Travel Assistance: Provides real-time, interactive travel advice and recommendations based on user queries.","metadata":{}},{"cell_type":"markdown","source":"## **Generative AI Capabilities Demonstrated:**\n1)Structured Output/JSON Mode:\nGenerates travel itineraries and packing lists in a structured JSON format, making the output easy to parse and use.\n\n2)Retrieval Augmented Generation (RAG):\nRetrieves relevant data from Chroma DB to add context to the model's responses, improving accuracy and personalization.\n\n3)Embeddings:\nConverts documents and queries into vector representations, stored in Chroma DB, for efficient document retrieval and similarity-based generation.\n\n4)Vector Search/Vector Database:\nUses Chroma DB as a vector database to store and retrieve document embeddings, enabling quick and relevant document retrieval for responses.\n\n5)Document Understanding:\nProcesses documents like travel tips, safety guides, and packing advice retrieved from Chroma DB to generate helpful and context-aware answers.\n\n6)Image Understanding:\nHandles image inputs (e.g., travel photos or landmarks) by interpreting and describing them to enrich the travel planning experience or suggest relevant destinations.","metadata":{}},{"cell_type":"markdown","source":"## **Tools & APIs Used:**\nGemini – Used as the LLM for generating itineraries, packing lists, and answering queries.\n\nChroma – Vector database used for storing and retrieving documents via embeddings.\n\nKaggle – Development environment where the entire project is implemented.\n\nJSON – Format used for structured output from the model, enabling easy parsing.\n\nEmbeddings Models for preference similarity","metadata":{}},{"cell_type":"markdown","source":"## **Setup Instructions**\nInstall the Python SDK.\n\nInstall and import a few essential libraries\n\nObtain a key from Google AI Studio. Add it as a Kaggle Secret or environment variable named GOOGLE_API_KEY.","metadata":{}},{"cell_type":"markdown","source":"## Import libraries","metadata":{}},{"cell_type":"code","source":"!pip install -qU google-generativeai==0.8.5 chromadb==0.6.3 pandas tqdm ipywidgets\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-20T16:34:12.497315Z","iopub.execute_input":"2025-04-20T16:34:12.497814Z","iopub.status.idle":"2025-04-20T16:34:18.118137Z","shell.execute_reply.started":"2025-04-20T16:34:12.497773Z","shell.execute_reply":"2025-04-20T16:34:18.116655Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"#### Set up your API key¶\n\nTo run the following cell, your API key must be stored it in a Kaggle secret named GOOGLE_API_KEY.\n\nIf you don't already have an API key, you can grab one from AI Studio. You can find detailed instructions in the docs.\n\nTo make the key available through Kaggle secrets, choose Secrets from the Add-ons menu and follow the instructions to add your key or enable it for this notebook.","metadata":{}},{"cell_type":"code","source":"from kaggle_secrets import UserSecretsClient\n\nGOOGLE_API_KEY = UserSecretsClient().get_secret(\"GOOGLE_API_KEY\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-20T16:34:18.120661Z","iopub.execute_input":"2025-04-20T16:34:18.121115Z","iopub.status.idle":"2025-04-20T16:34:18.609809Z","shell.execute_reply.started":"2025-04-20T16:34:18.121065Z","shell.execute_reply":"2025-04-20T16:34:18.608725Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Import and configure the Gemini model","metadata":{}},{"cell_type":"code","source":"import google.generativeai as genai\nfrom kaggle_secrets import UserSecretsClient\nsecrets = UserSecretsClient()\nGOOGLE_API_KEY = secrets.get_secret(\"GOOGLE_API_KEY\")\ngenai.configure(api_key=GOOGLE_API_KEY)\n\nmodel = genai.GenerativeModel('gemini-2.0-flash')\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-20T16:34:18.610759Z","iopub.execute_input":"2025-04-20T16:34:18.611052Z","iopub.status.idle":"2025-04-20T16:34:18.891886Z","shell.execute_reply.started":"2025-04-20T16:34:18.611028Z","shell.execute_reply":"2025-04-20T16:34:18.890753Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## **1. Generate the Dynamic Prompt for Gemini**\n\nUses structured prompting to generate a day-wise JSON travel itinerary based on user preferences","metadata":{}},{"cell_type":"code","source":"def generate_travel_itinerary(preferences):\n    prompt = f\"\"\"\nYou are a smart AI travel planner. A user is planning a {preferences['days']}-day trip to {preferences['destination']}.\nThe user loves the following activities: {', '.join(preferences['activities'])}.\nTheir favorite foods are: {', '.join(preferences['food'])}.\nTheir budget is {preferences['budget']}, and they prefer {preferences['accommodation']} accommodation and {preferences['transportation']} transportation.\n\nGenerate a structured JSON output where:\n- Each day has `day_number`, `city`, `activities`, `local_food`, and `travel_tips`.\n- There should be {preferences['days']} entries in a list called `itinerary`.\nRespond ONLY with a JSON object.\n\"\"\"\n    model = genai.GenerativeModel(\"gemini-1.5-flash\")  # <-- make sure this line is present\n    response = model.generate_content(\n        prompt,\n        generation_config={\"response_mime_type\": \"application/json\"}\n    )\n    return response.text  \n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-20T16:34:18.892939Z","iopub.execute_input":"2025-04-20T16:34:18.893323Z","iopub.status.idle":"2025-04-20T16:34:18.900122Z","shell.execute_reply.started":"2025-04-20T16:34:18.893294Z","shell.execute_reply":"2025-04-20T16:34:18.898843Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## **2. Collect User Preferences for Personalization**\nCollects personalized travel details from the user through ipywidgets to guide itinerary and packing generation.","metadata":{}},{"cell_type":"code","source":"import ipywidgets as widgets\nfrom IPython.display import display\nimport google.generativeai as genai\n\n\n# --- Widgets for User Input ---\ndestination = widgets.Text(description=\"Destination:\")\ndays = widgets.IntSlider(description=\"Days\", min=1, max=30, value=5)\nactivities = widgets.SelectMultiple(\n    options=[\"history\", \"nature\", \"museums\", \"adventure\", \"relaxation\", \"shopping\"],\n    description=\"Activities\",\n)\nfood = widgets.SelectMultiple(\n    options=[\"pizza\", \"pasta\", \"sushi\", \"tacos\", \"noodles\"],\n    description=\"Food\",\n)\nbudget = widgets.Dropdown(\n    options=[\"low\", \"medium\", \"high\"],\n    description=\"Budget\",\n)\naccommodation = widgets.Dropdown(\n    options=[\"hotel\", \"vacation rental\", \"hostel\"],\n    description=\"Stay\",\n)\ntransportation = widgets.Dropdown(\n    options=[\"train\", \"bus\", \"car\", \"flight\"],\n    description=\"Transport\",\n)\n\n# --- Display all widgets ---\ndisplay(destination, days, activities, food, budget, accommodation, transportation)\n\n# --- Function to collect input from widgets ---\ndef collect_user_preferences():\n    preferences = {\n        'destination': destination.value,\n        'days': str(days.value),\n        'activities': list(activities.value),\n        'food': list(food.value),\n        'budget': budget.value,\n        'accommodation': accommodation.value,\n        'transportation': transportation.value\n    }\n    return preferences\n\n# --- Generate Itinerary Function ---\ndef generate_travel_itinerary(preferences):\n    prompt = f\"\"\"\nYou are a smart AI travel planner. A user is planning a {preferences['days']}-day trip to {preferences['destination']}.\nThe user loves the following activities: {', '.join(preferences['activities'])}.\nTheir favorite foods are: {', '.join(preferences['food'])}.\nTheir budget is {preferences['budget']}, and they prefer {preferences['accommodation']} accommodation and {preferences['transportation']} transportation.\n\nGenerate a structured JSON output where:\n- Each day has `day_number`, `city`, `activities`, `local_food`, and `travel_tips`.\n- There should be {preferences['days']} entries in a list called `itinerary`.\nRespond ONLY with a JSON object.\n\"\"\"\n    model = genai.GenerativeModel(\"gemini-1.5-flash\")\n    response = model.generate_content(\n        prompt,\n        generation_config={\"response_mime_type\": \"application/json\"}\n    )\n    return response.text\n\n# --- Add a Button to Trigger Itinerary Generation ---\ngenerate_button = widgets.Button(description=\"Generate Itinerary\")\n\noutput = widgets.Output()\n\ndef on_generate_clicked(b):\n    with output:\n        output.clear_output()\n        preferences = collect_user_preferences()\n        itinerary = generate_travel_itinerary(preferences)\n        print(itinerary)\n\ngenerate_button.on_click(on_generate_clicked)\n\ndisplay(generate_button, output)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-20T16:34:18.903528Z","iopub.execute_input":"2025-04-20T16:34:18.903921Z","iopub.status.idle":"2025-04-20T16:34:18.966986Z","shell.execute_reply.started":"2025-04-20T16:34:18.903896Z","shell.execute_reply":"2025-04-20T16:34:18.9659Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## **4. Itinerary preview**\n\nParses the JSON itinerary and neatly displays selected travel plan details like activities, food, and tips for each day.","metadata":{}},{"cell_type":"code","source":"import json\n\n\npreferences = collect_user_preferences()  \n\n\nitinerary_json = generate_travel_itinerary(preferences)\n\n\n\nitinerary_data = json.loads(itinerary_json)\n\n\nfor day in itinerary_data['itinerary']:  # Iterate through days\n    print(f\"\\nDay {day['day_number']} in {day['city']}\")\n    print(\"Activities:\", \", \".join(day['activities']))\n    print(\"Local Food:\", day['local_food'])  # Ensure it's displayed as a proper string\n    print(\"Travel Tips:\", day['travel_tips'])\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-20T16:34:59.393824Z","iopub.execute_input":"2025-04-20T16:34:59.394177Z","iopub.status.idle":"2025-04-20T16:35:02.7044Z","shell.execute_reply.started":"2025-04-20T16:34:59.394151Z","shell.execute_reply":"2025-04-20T16:35:02.703418Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":" Install ChromaDB and the Gemini API Python SDK.","metadata":{}},{"cell_type":"code","source":"!pip install -qU \"google-genai==1.7.0\" \"chromadb==0.6.3\"","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-20T16:34:22.880653Z","iopub.execute_input":"2025-04-20T16:34:22.88117Z","iopub.status.idle":"2025-04-20T16:34:27.620311Z","shell.execute_reply.started":"2025-04-20T16:34:22.881033Z","shell.execute_reply":"2025-04-20T16:34:27.619087Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from google import genai\nfrom google.genai import types\n\nfrom IPython.display import Markdown\n\ngenai.__version__","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-20T16:34:27.621997Z","iopub.execute_input":"2025-04-20T16:34:27.622485Z","iopub.status.idle":"2025-04-20T16:34:27.630918Z","shell.execute_reply.started":"2025-04-20T16:34:27.62244Z","shell.execute_reply":"2025-04-20T16:34:27.629942Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"client = genai.Client(api_key=GOOGLE_API_KEY)\n\nfor m in client.models.list():\n    if \"embedContent\" in m.supported_actions:\n        print(m.name)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-20T16:34:27.631895Z","iopub.execute_input":"2025-04-20T16:34:27.632189Z","iopub.status.idle":"2025-04-20T16:34:27.972489Z","shell.execute_reply.started":"2025-04-20T16:34:27.632156Z","shell.execute_reply":"2025-04-20T16:34:27.971169Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## **4. Document Collection:**\nThe documents contain valuable travel tips, including safety tips, packing advice, airport navigation, common mistakes, and currency exchange guidance, which will serve as the knowledge base.","metadata":{}},{"cell_type":"code","source":"DOCUMENT1 = \"Best Travel Safety Tips: Always keep a close eye on your belongings, especially in crowded areas like tourist attractions or public transport. Use a money belt, neck pouch, or secure backpack to keep valuables hidden and safe. Be cautious when using public Wi-Fi, as hackers may try to access your sensitive information. Stay informed about local safety tips, customs, and emergency contacts. Carry a copy of your passport, visa, and emergency contacts. Share your travel plans with someone back home for extra security.\"\n\nDOCUMENT2 = \"Packing Advice for Different Climates: In hot climates, pack light, breathable clothes made of natural fibers like cotton or linen. Don't forget sunscreen, sunglasses, a hat, and insect repellent. For cold weather, pack warm layers, thermal undergarments, and a waterproof jacket to stay dry. Consider including gloves, a scarf, and a hat for added warmth. If traveling to high altitudes, pack sunscreen for protection from the strong sun. Always check weather forecasts to adjust your packing list for the most accurate needs.\"\n\nDOCUMENT3 = \"How to Navigate Airports or Transportation Systems: At the airport, upon arrival, follow the clear signage leading you to baggage claim, immigration, and customs. Some airports have self-check-in kiosks for faster processing. Once through customs, keep your boarding pass and passport handy for re-checking. If you're using public transport in the city, research local metro, bus, or train routes ahead of time, especially the schedules. Apps like Google Maps or city-specific transport apps are very useful for navigating unfamiliar routes and timetables.\"\n\nDOCUMENT4 = \"Common Travel Mistakes to Avoid: Don’t overpack or book too many activities. Give yourself time to adjust to the local time zone and explore at a leisurely pace. Avoid carrying all your cash and cards in one place; instead, distribute them across multiple secure pockets. Don’t forget to have a backup for accommodation or transport if things don't go as planned. It's also essential to read reviews of accommodations and local services to avoid unpleasant surprises. Lastly, don’t skip travel insurance, as emergencies can happen unexpectedly.\"\n\nDOCUMENT5 = \"Currency Exchange Tips or Local Customs for Various Countries: Always compare exchange rates before buying foreign currency, and try to avoid exchanging money at airports where rates are often unfavorable. Use a local ATM to withdraw cash for better rates. Some countries may prefer cash over credit, so it's advisable to carry a small amount of local currency. Familiarize yourself with tipping customs in each country—some cultures expect tips, while others include them in service fees. Respect local customs, including greetings, dress codes, and dining etiquette.\"\n\ndocuments = [DOCUMENT1, DOCUMENT2, DOCUMENT3, DOCUMENT4, DOCUMENT5]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-20T16:34:27.973543Z","iopub.execute_input":"2025-04-20T16:34:27.974146Z","iopub.status.idle":"2025-04-20T16:34:27.980735Z","shell.execute_reply.started":"2025-04-20T16:34:27.974109Z","shell.execute_reply":"2025-04-20T16:34:27.979644Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## **5. Embedding Documents:**\nA custom GeminiEmbeddingFunction is used to convert the documents into embeddings with the Gemini model, enabling efficient similarity searches. The embedding process is set for document mode, allowing for document-based embeddings.","metadata":{}},{"cell_type":"code","source":"from chromadb import Documents, EmbeddingFunction, Embeddings\nfrom google.api_core import retry\n\nfrom google.genai import types\nis_retriable = lambda e: (isinstance(e, genai.errors.APIError) and e.code in {429, 503})\n\n\nclass GeminiEmbeddingFunction(EmbeddingFunction):\n    document_mode = True\n\n    @retry.Retry(predicate=is_retriable)\n    def __call__(self, input: Documents) -> Embeddings:\n        if self.document_mode:\n            embedding_task = \"retrieval_document\"\n        else:\n            embedding_task = \"retrieval_query\"\n\n        response = client.models.embed_content(\n            model=\"models/text-embedding-004\",\n            contents=input,\n            config=types.EmbedContentConfig(\n                task_type=embedding_task,\n            ),\n        )\n        return [e.values for e in response.embeddings]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-20T16:34:27.981902Z","iopub.execute_input":"2025-04-20T16:34:27.982315Z","iopub.status.idle":"2025-04-20T16:34:28.011597Z","shell.execute_reply.started":"2025-04-20T16:34:27.98228Z","shell.execute_reply":"2025-04-20T16:34:28.010731Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## **6. Chroma Database Setup:**\nA Chroma database is created, and the documents are added to the collection using the generated embeddings. This database will store the documents and allow for quick retrieval.","metadata":{}},{"cell_type":"code","source":"import chromadb\n\nDB_NAME = \"googlecardb\"\n\nembed_fn = GeminiEmbeddingFunction()\nembed_fn.document_mode = True\n\nchroma_client = chromadb.Client()\ndb = chroma_client.get_or_create_collection(name=DB_NAME, embedding_function=embed_fn)\n\ndb.add(documents=documents, ids=[str(i) for i in range(len(documents))])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-20T16:34:28.012719Z","iopub.execute_input":"2025-04-20T16:34:28.013145Z","iopub.status.idle":"2025-04-20T16:34:28.368261Z","shell.execute_reply.started":"2025-04-20T16:34:28.013113Z","shell.execute_reply":"2025-04-20T16:34:28.367349Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## **7. Querying the Database:**\nWhen a query, like “Give me some packing tips,” is made, the system switches to query mode to search for the most relevant document from the database, displaying the appropriate result.","metadata":{}},{"cell_type":"code","source":"embed_fn.document_mode = False\n\nquery = \"Give me some packing tips.\"\n\nresult = db.query(query_texts=[query], n_results=1)\n[all_passages] = result[\"documents\"]\n\nMarkdown(all_passages[0])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-20T16:34:28.369482Z","iopub.execute_input":"2025-04-20T16:34:28.369855Z","iopub.status.idle":"2025-04-20T16:34:28.689833Z","shell.execute_reply.started":"2025-04-20T16:34:28.369826Z","shell.execute_reply":"2025-04-20T16:34:28.688842Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## **8. Prompt Construction:**\nA query is processed by replacing newlines with spaces and then integrated into a user-friendly, comprehensive prompt. The prompt specifies the desired tone and the need for clear explanations for a non-technical audience. It also includes the relevant passages from the Chroma database to provide context.","metadata":{}},{"cell_type":"code","source":"query_oneline = query.replace(\"\\n\", \" \")\n\n# This prompt is where you can specify any guidance on tone, or what topics the model should stick to, or avoid.\nprompt = f\"\"\"You are a helpful and informative bot that answers questions using text from the reference passage included below. \nBe sure to respond in a complete sentence, being comprehensive, including all relevant background information. \nHowever, you are talking to a non-technical audience, so be sure to break down complicated concepts and \nstrike a friendly and converstional tone. If the passage is irrelevant to the answer, you may ignore it.\n\nQUESTION: {query_oneline}\n\"\"\"\n\n# Add the retrieved documents to the prompt.\nfor passage in all_passages:\n    passage_oneline = passage.replace(\"\\n\", \" \")\n    prompt += f\"PASSAGE: {passage_oneline}\\n\"\n\nprint(prompt)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-20T16:34:28.700385Z","iopub.execute_input":"2025-04-20T16:34:28.700741Z","iopub.status.idle":"2025-04-20T16:34:28.707311Z","shell.execute_reply.started":"2025-04-20T16:34:28.700715Z","shell.execute_reply":"2025-04-20T16:34:28.706244Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## **9. Answer Generation:**\nThe prompt is sent to the Gemini model (gemini-2.0-flash), which processes the information and generates an answer based on the context provided. The result is a detailed and friendly response, tailored to the user's query and derived from the relevant documents.","metadata":{}},{"cell_type":"code","source":"answer = client.models.generate_content(\n    model=\"gemini-2.0-flash\",\n    contents=prompt)\n\nMarkdown(answer.text)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-20T16:34:28.708279Z","iopub.execute_input":"2025-04-20T16:34:28.708731Z","iopub.status.idle":"2025-04-20T16:34:29.955569Z","shell.execute_reply.started":"2025-04-20T16:34:28.708703Z","shell.execute_reply":"2025-04-20T16:34:29.954438Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## **Generative AI: Packing List Generation**\nDescription: This section demonstrates how to use generative AI to create a personalized packing list based on the user's preferences.\n\n**1)Packing List Generation:**\nThe function generate_packing_list() creates a personalized packing list by dynamically incorporating the user's preferences (e.g., destination, activities, food, budget, accommodation, and transportation) into the prompt. The AI model uses this input to generate a packing list in a structured JSON format, categorized into different sections (e.g., Clothing, Electronics, Documents).\n\n**2)Response Processing and Display:**\nThe print_packing_list() function receives the generated packing list, parses it from JSON format, and displays it in a readable format. It checks for errors in the structure or JSON format and provides feedback if anything is missing or incorrect.","metadata":{}},{"cell_type":"code","source":"import json\n\npreferences = collect_user_preferences()  # Assuming preferences are already gathered\n\ndef generate_packing_list(preferences):\n    # Updated prompt with clearer instruction for structured response\n    prompt = f\"\"\"\n    You are a travel assistant. A user is planning a {preferences['days']}-day trip to {preferences['destination']}.\n    The user loves the following activities: {', '.join(preferences['activities'])}.\n    Their favorite foods are: {', '.join(preferences['food'])}.\n    Their budget is {preferences['budget']}, and they prefer {preferences['accommodation']} accommodation and {preferences['transportation']} transportation.\n\n    Based on this information, generate a structured JSON output for the packing list where:\n    - There should be different categories like 'Clothing', 'Electronics', 'Documents', 'Toiletries', 'Other Essentials', and 'Optional Items'.\n    - Each category should provide a list of items that the user should pack based on their preferences (activities, destination, etc.).\n    - The output should be in the following format:\n      {{\n        \"Clothing\": [\"item1\", \"item2\", ...],\n        \"Electronics\": [\"item1\", \"item2\", ...],\n        \"Documents\": [\"item1\", \"item2\", ...],\n        \"Toiletries\": [\"item1\", \"item2\", ...],\n        \"Other Essentials\": [\"item1\", \"item2\", ...],\n        \"Optional Items\": [\"item1\", \"item2\", ...]\n      }}\n    Respond ONLY with a JSON object, and ensure that all categories are included in the response.\n    \"\"\"\n    \n    response = model.generate_content(prompt, generation_config={\"response_mime_type\": \"application/json\"})\n    return response.text\n\ndef print_packing_list(preferences):\n    packing_list_json = generate_packing_list(preferences)\n\n    # Debug: Print raw response\n    \n\n    try:\n        packing_list = json.loads(packing_list_json)\n\n        if 'Clothing' in packing_list:\n            print(\"Personalized Packing List for Your Trip to\", preferences['destination'] + \":\")\n\n            for category, items in packing_list.items():\n                print(f\"\\n{category}:\")\n                for item in items:\n                    print(f\"- {item}\")\n        else:\n            print(\"Error: Packing list structure is not as expected.\")\n            print(\"Received JSON does not contain 'Clothing' or other categories.\")\n            \n    except json.JSONDecodeError as e:\n        print(f\"Error decoding JSON: {e}\")\n        print(\"Received response is not valid JSON.\")\n\n# Print the packing list in a readable format\nprint_packing_list(preferences)  # Using the preferences you've already gathered\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-20T16:35:25.000381Z","iopub.execute_input":"2025-04-20T16:35:25.000752Z","iopub.status.idle":"2025-04-20T16:35:26.312642Z","shell.execute_reply.started":"2025-04-20T16:35:25.000725Z","shell.execute_reply":"2025-04-20T16:35:26.311325Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## **Code for Image Analysis Using Google Gemini**\nDescription:\nThis Python script demonstrates how to analyze an image using the Google Gemini API. The code performs the following steps:\n\nImports Necessary Libraries: It imports the PIL library for image handling, io for managing image byte streams, and google.generativeai to interact with the Google Gemini API.\n\nConfigures Gemini API: The script initializes the Gemini client by setting the API key using the genai.configure function.\n\nImage Loading: The image file (downloaded_image.jpg) is opened and read as binary data, which is necessary for sending it to the Gemini model.\n\nContent Generation Request: The image data is sent to the Gemini model with a query asking for a detailed description of the image. The model processes the image and returns a descriptive text.\n\nOutput the Analysis: The description returned by the model is printed, offering insights into the visual content of the image.","metadata":{}},{"cell_type":"code","source":"import requests\n\nimage_url = \"https://images.unsplash.com/photo-1543429776-2782fc8e1acd?fm=jpg&q=60&w=3000&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\"  # Replace with your image URL\nimage_path = \"downloaded_image.jpg\"\n\nresponse = requests.get(image_url)\nif response.status_code == 200:\n    with open(image_path, 'wb') as f:\n        f.write(response.content)\n    print(\"Image downloaded successfully.\")\nelse:\n    print(f\"Failed to download image. Status code: {response.status_code}\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-20T16:34:30.583873Z","iopub.execute_input":"2025-04-20T16:34:30.584187Z","iopub.status.idle":"2025-04-20T16:34:30.709427Z","shell.execute_reply.started":"2025-04-20T16:34:30.584157Z","shell.execute_reply":"2025-04-20T16:34:30.708414Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from PIL import Image\nimport io\nimport google.generativeai as genai\n\n# Initialize the Gemini client\ngenai.configure(api_key=GOOGLE_API_KEY)\nmodel = genai.GenerativeModel(\"gemini-1.5-flash\")\n\n# Load the image\nwith open(\"downloaded_image.jpg\", \"rb\") as img_file:\n    image_bytes = img_file.read()\n\n# Analyze the image\nresponse = model.generate_content([\n    {\"mime_type\": \"image/jpeg\", \"data\": image_bytes},\n    {\"text\": \"Describe the contents of this image.\"}\n])\n\nMarkdown(response.text)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-20T16:34:30.710408Z","iopub.execute_input":"2025-04-20T16:34:30.710797Z","iopub.status.idle":"2025-04-20T16:34:35.121395Z","shell.execute_reply.started":"2025-04-20T16:34:30.710702Z","shell.execute_reply":"2025-04-20T16:34:35.120433Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## **Conclusion**:\nIn this project, we successfully developed an AI-powered travel assistant that leverages Generative AI capabilities such as image analysis, retrieval-augmented generation (RAG), and structured output generation. By integrating tools like Google Gemini and Chroma, we created an intelligent system that generates personalized travel itineraries, packing lists, and descriptions of destinations. This project not only highlights the potential of generative models in real-world applications but also provides a solid foundation for future enhancements, aiming to offer travelers a seamless and personalized experience when planning their trips.","metadata":{}},{"cell_type":"markdown","source":"## **Future Enhancements:**\n\n\n1. Broader Destination Support: Include more destinations and diverse travel options.\n2. Real-Time Data: Integrate live data like weather and transport schedules.\n3. Multilingual Support: Offer the service in multiple languages.\n4. Personalization: Enhance recommendations based on user behavior.\n","metadata":{}},{"cell_type":"markdown","source":"Gen AI Intensive Course Capstone 2025Q1¶\n\nCapstone requirements: https://www.kaggle.com/competitions/gen-ai-intensive-course-capstone-2025q1","metadata":{}},{"cell_type":"markdown","source":"Citation:\n\n@misc{gen-ai-intensive-course-capstone-2025q1,\n    author = {Addison Howard and Brenda Flynn and Myles O'Neill and Nate and Polong Lin},\n    title = {Gen AI Intensive Course Capstone 2025Q1},\n    year = {2025},\n    howpublished = {\\url{https://kaggle.com/competitions/gen-ai-intensive-course-capstone-2025q1}},\n    note = {Kaggle}\n}\n","metadata":{}}]}